// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=./interface_mock.go -package=azkeyvault KeysClient
//

// Package azkeyvault is a generated GoMock package.
package azkeyvault

import (
	context "context"
	reflect "reflect"

	azcertificates "github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azcertificates"
	azkeys "github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azkeys"
	gomock "go.uber.org/mock/gomock"
)

// MockKeysClient is a mock of KeysClient interface.
type MockKeysClient struct {
	ctrl     *gomock.Controller
	recorder *MockKeysClientMockRecorder
	isgomock struct{}
}

// MockKeysClientMockRecorder is the mock recorder for MockKeysClient.
type MockKeysClientMockRecorder struct {
	mock *MockKeysClient
}

// NewMockKeysClient creates a new mock instance.
func NewMockKeysClient(ctrl *gomock.Controller) *MockKeysClient {
	mock := &MockKeysClient{ctrl: ctrl}
	mock.recorder = &MockKeysClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeysClient) EXPECT() *MockKeysClientMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockKeysClient) Decrypt(ctx context.Context, keyName, keyVersion string, parameters azkeys.KeyOperationParameters, options *azkeys.DecryptOptions) (azkeys.DecryptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", ctx, keyName, keyVersion, parameters, options)
	ret0, _ := ret[0].(azkeys.DecryptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockKeysClientMockRecorder) Decrypt(ctx, keyName, keyVersion, parameters, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockKeysClient)(nil).Decrypt), ctx, keyName, keyVersion, parameters, options)
}

// GetKey mocks base method.
func (m *MockKeysClient) GetKey(ctx context.Context, name, version string, options *azkeys.GetKeyOptions) (azkeys.GetKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", ctx, name, version, options)
	ret0, _ := ret[0].(azkeys.GetKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKey indicates an expected call of GetKey.
func (mr *MockKeysClientMockRecorder) GetKey(ctx, name, version, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockKeysClient)(nil).GetKey), ctx, name, version, options)
}

// Sign mocks base method.
func (m *MockKeysClient) Sign(ctx context.Context, name, version string, parameters azkeys.SignParameters, options *azkeys.SignOptions) (azkeys.SignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", ctx, name, version, parameters, options)
	ret0, _ := ret[0].(azkeys.SignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockKeysClientMockRecorder) Sign(ctx, name, version, parameters, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockKeysClient)(nil).Sign), ctx, name, version, parameters, options)
}

// MockCertificatesClient is a mock of CertificatesClient interface.
type MockCertificatesClient struct {
	ctrl     *gomock.Controller
	recorder *MockCertificatesClientMockRecorder
	isgomock struct{}
}

// MockCertificatesClientMockRecorder is the mock recorder for MockCertificatesClient.
type MockCertificatesClientMockRecorder struct {
	mock *MockCertificatesClient
}

// NewMockCertificatesClient creates a new mock instance.
func NewMockCertificatesClient(ctrl *gomock.Controller) *MockCertificatesClient {
	mock := &MockCertificatesClient{ctrl: ctrl}
	mock.recorder = &MockCertificatesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificatesClient) EXPECT() *MockCertificatesClientMockRecorder {
	return m.recorder
}

// GetCertificate mocks base method.
func (m *MockCertificatesClient) GetCertificate(ctx context.Context, certificateName, certificateVersion string, options *azcertificates.GetCertificateOptions) (azcertificates.GetCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificate", ctx, certificateName, certificateVersion, options)
	ret0, _ := ret[0].(azcertificates.GetCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificate indicates an expected call of GetCertificate.
func (mr *MockCertificatesClientMockRecorder) GetCertificate(ctx, certificateName, certificateVersion, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificate", reflect.TypeOf((*MockCertificatesClient)(nil).GetCertificate), ctx, certificateName, certificateVersion, options)
}
