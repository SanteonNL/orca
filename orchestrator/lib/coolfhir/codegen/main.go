package main

import "os"

func main() {
	// Complete list of all FHIR R4 types.
	// I could be a better developer and fetch these online, but I chose to let Copilot to generate this list, instead.
	var listOfFHIRTypes = []string{
		"Account",
		"ActivityDefinition",
		"AdverseEvent",
		"AllergyIntolerance",
		"Appointment",
		"AppointmentResponse",
		"AuditEvent",
		"Basic",
		"Binary",
		"BiologicallyDerivedProduct",
		"BodyStructure",
		"Bundle",
		"CapabilityStatement",
		"CarePlan",
		"CareTeam",
		"CatalogEntry",
		"ChargeItem",
		"ChargeItemDefinition",
		"Claim",
		"ClaimResponse",
		"ClinicalImpression",
		"CodeSystem",
		"Communication",
		"CommunicationRequest",
		"CompartmentDefinition",
		"Composition",
		"ConceptMap",
		"Condition",
		"Consent",
		"Contract",
		"Coverage",
		"CoverageEligibilityRequest",
		"CoverageEligibilityResponse",
		"DetectedIssue",
		"Device",
		"DeviceDefinition",
		"DeviceMetric",
		"DeviceRequest",
		"DeviceUseStatement",
		"DiagnosticReport",
		"DocumentManifest",
		"DocumentReference",
		"EffectEvidenceSynthesis",
		"Encounter",
		"Endpoint",
		"EnrollmentRequest",
		"EnrollmentResponse",
		"EpisodeOfCare",
		"EventDefinition",
		"Evidence",
		"EvidenceVariable",
		"ExampleScenario",
		"ExplanationOfBenefit",
		"FamilyMemberHistory",
		"Flag",
		"Goal",
		"GraphDefinition",
		"Group",
		"GuidanceResponse",
		"HealthcareService",
		"ImagingStudy",
		"Immunization",
		"ImmunizationEvaluation",
		"ImmunizationRecommendation",
		"ImplementationGuide",
		"InsurancePlan",
		"Invoice",
		"Library",
		"Linkage",
		"List",
		"Location",
		"Measure",
		"MeasureReport",
		"Media",
		"Medication",
		"MedicationAdministration",
		"MedicationDispense",
		"MedicationKnowledge",
		"MedicationRequest",
		"MedicationStatement",
		"MedicinalProduct",
		"MedicinalProductAuthorization",
		"MedicinalProductContraindication",
		"MedicinalProductIndication",
		"MedicinalProductIngredient",
		"MedicinalProductInteraction",
		"MedicinalProductManufactured",
		"MedicinalProductPackaged",
		"MedicinalProductPharmaceutical",
		"MedicinalProductUndesirableEffect",
		"MessageDefinition",
		"MessageHeader",
		"MolecularSequence",
		"NamingSystem",
		"NutritionOrder",
		"Observation",
		"ObservationDefinition",
		"OperationDefinition",
		"OperationOutcome",
		"Organization",
		"OrganizationAffiliation",
		"Parameters",
		"Patient",
		"PaymentNotice",
		"PaymentReconciliation",
		"Person",
		"PlanDefinition",
		"Practitioner",
		"PractitionerRole",
		"Procedure",
		"Provenance",
		"Questionnaire",
		"QuestionnaireResponse",
		"RelatedPerson",
		"RequestGroup",
		"ResearchDefinition",
		"ResearchElementDefinition",
		"ResearchStudy",
		"ResearchSubject",
		"RiskAssessment",
		"RiskEvidenceSynthesis",
		"Schedule",
		"SearchParameter",
		"ServiceRequest",
		"Slot",
		"Specimen",
		"SpecimenDefinition",
		"StructureDefinition",
		"StructureMap",
		"Subscription",
		"Substance",
		"SubstanceNucleicAcid",
		"SubstancePolymer",
		"SubstanceProtein",
		"SubstanceReferenceInformation",
		"SubstanceSourceMaterial",
		"SubstanceSpecification",
		"SupplyDelivery",
		"SupplyRequest",
		"Task",
		"TerminologyCapabilities",
		"TestReport",
		"TestScript",
		"ValueSet",
		"VerificationResult",
		"VisionPrescription",
	}
	var code string
	code += "package coolfhir\n\n"
	code += "// Code generated by go generate; DO NOT EDIT.\n\n"
	code += "import (\n" +
		"	\"fmt\"\n" +
		"	\"github.com/zorgbijjou/golang-fhir-models/fhir-models/fhir\"\n" +
		")\n\n"
	//
	// func ResourceType(resource interface{}) string
	//
	code += "func ResourceType(resource interface{}) string {\n"
	code += "	switch resource.(type) {\n"
	for _, fhirType := range listOfFHIRTypes {
		code += "	case *fhir." + fhirType + ":\n"
		code += "		return \"" + fhirType + "\"\n"
		code += "	case fhir." + fhirType + ":\n"
		code += "		return \"" + fhirType + "\"\n"
	}
	code += "	default:\n"
	code += "		return \"\"\n"
	code += "	}\n"
	code += "}\n\n"

	//
	// func ResourceID(resource interface{}) string
	//
	code += "func ResourceID(resource interface{}) *string {\n"
	code += "	switch resource.(type) {\n"
	for _, fhirType := range listOfFHIRTypes {
		code += "	case *fhir." + fhirType + ":\n"
		code += "		return (*resource.(*fhir." + fhirType + ")).Id\n"
		code += "	case fhir." + fhirType + ":\n"
		code += "		return (resource.(fhir." + fhirType + ")).Id\n"
	}
	code += "	default:\n"
	code += "		panic(\"ResourceID called with non-FHIR resource: \" + fmt.Sprintf(\"%T\", resource))\n"
	code += "	}\n"
	code += "}\n\n"

	//
	// func SetSource(resource interface{}, source string)
	//
	code += "func SetSource(resource interface{}, source *string) {\n"
	code += "	switch resource.(type) {\n"
	for _, fhirType := range listOfFHIRTypes {
		code += "	case *fhir." + fhirType + ":\n"
		code += "		meta := resource.(*fhir." + fhirType + ").Meta\n"
		code += "		if meta == nil {\n"
		code += "			meta = &fhir.Meta{}\n"
		code += "			resource.(*fhir." + fhirType + ").Meta = meta\n"
		code += "		}\n"
		code += "		meta.Source = source\n"
	}
	code += "	default:\n"
	code += "		panic(\"SetSource called with non-FHIR resource, or not a pointer: \" + fmt.Sprintf(\"%T\", resource))\n"
	code += "	}\n"
	code += "}\n\n"

	// Write the generated code to a file
	if err := os.WriteFile("type.gen.go", []byte(code), 0644); err != nil {
		panic(err)
	}
}
