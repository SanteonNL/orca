// Code generated by MockGen. DO NOT EDIT.
// Source: lib/coolfhir/client.go
//
// Generated by this command:
//
//	mockgen -destination=lib/coolfhir/cient_mock.go -package=coolfhir -source=lib/coolfhir/client.go
//

// Package coolfhir is a generated GoMock package.
package coolfhir

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClient) Create(path string, resource, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", path, resource, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockClientMockRecorder) Create(path, resource, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClient)(nil).Create), path, resource, result)
}

// Read mocks base method.
func (m *MockClient) Read(path string, target any, opts ...Option) error {
	m.ctrl.T.Helper()
	varargs := []any{path, target}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockClientMockRecorder) Read(path, target any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{path, target}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockClient)(nil).Read), varargs...)
}

// Update mocks base method.
func (m *MockClient) Update(path string, resource, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", path, resource, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockClientMockRecorder) Update(path, resource, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClient)(nil).Update), path, resource, result)
}
