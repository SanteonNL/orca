// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nuts-foundation/go-nuts-client/nuts/vcr (interfaces: ClientWithResponsesInterface)
//
// Generated by this command:
//
//	mockgen -destination=./vcrclient_mock/mock.go -package=vcrclient_mock github.com/nuts-foundation/go-nuts-client/nuts/vcr ClientWithResponsesInterface
//

// Package vcrclient_mock is a generated GoMock package.
package vcrclient_mock

import (
	context "context"
	io "io"
	reflect "reflect"

	vcr "github.com/nuts-foundation/go-nuts-client/nuts/vcr"
	gomock "go.uber.org/mock/gomock"
)

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
	isgomock struct{}
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// CreateVPWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateVPWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...vcr.RequestEditorFn) (*vcr.CreateVPResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVPWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*vcr.CreateVPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVPWithBodyWithResponse indicates an expected call of CreateVPWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateVPWithBodyWithResponse(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVPWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateVPWithBodyWithResponse), varargs...)
}

// CreateVPWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateVPWithResponse(ctx context.Context, body vcr.CreateVPJSONRequestBody, reqEditors ...vcr.RequestEditorFn) (*vcr.CreateVPResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVPWithResponse", varargs...)
	ret0, _ := ret[0].(*vcr.CreateVPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVPWithResponse indicates an expected call of CreateVPWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateVPWithResponse(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVPWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateVPWithResponse), varargs...)
}

// GetCredentialsInWalletWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCredentialsInWalletWithResponse(ctx context.Context, subjectID string, reqEditors ...vcr.RequestEditorFn) (*vcr.GetCredentialsInWalletResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subjectID}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCredentialsInWalletWithResponse", varargs...)
	ret0, _ := ret[0].(*vcr.GetCredentialsInWalletResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialsInWalletWithResponse indicates an expected call of GetCredentialsInWalletWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCredentialsInWalletWithResponse(ctx, subjectID any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subjectID}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialsInWalletWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCredentialsInWalletWithResponse), varargs...)
}

// IssueVCWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) IssueVCWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...vcr.RequestEditorFn) (*vcr.IssueVCResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IssueVCWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*vcr.IssueVCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueVCWithBodyWithResponse indicates an expected call of IssueVCWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) IssueVCWithBodyWithResponse(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueVCWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).IssueVCWithBodyWithResponse), varargs...)
}

// IssueVCWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) IssueVCWithResponse(ctx context.Context, body vcr.IssueVCJSONRequestBody, reqEditors ...vcr.RequestEditorFn) (*vcr.IssueVCResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IssueVCWithResponse", varargs...)
	ret0, _ := ret[0].(*vcr.IssueVCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueVCWithResponse indicates an expected call of IssueVCWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) IssueVCWithResponse(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueVCWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).IssueVCWithResponse), varargs...)
}

// ListTrustedWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListTrustedWithResponse(ctx context.Context, credentialType string, reqEditors ...vcr.RequestEditorFn) (*vcr.ListTrustedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, credentialType}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrustedWithResponse", varargs...)
	ret0, _ := ret[0].(*vcr.ListTrustedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrustedWithResponse indicates an expected call of ListTrustedWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListTrustedWithResponse(ctx, credentialType any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, credentialType}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrustedWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListTrustedWithResponse), varargs...)
}

// ListUntrustedWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListUntrustedWithResponse(ctx context.Context, credentialType string, reqEditors ...vcr.RequestEditorFn) (*vcr.ListUntrustedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, credentialType}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUntrustedWithResponse", varargs...)
	ret0, _ := ret[0].(*vcr.ListUntrustedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUntrustedWithResponse indicates an expected call of ListUntrustedWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListUntrustedWithResponse(ctx, credentialType any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, credentialType}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUntrustedWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListUntrustedWithResponse), varargs...)
}

// LoadVCWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) LoadVCWithBodyWithResponse(ctx context.Context, subjectID, contentType string, body io.Reader, reqEditors ...vcr.RequestEditorFn) (*vcr.LoadVCResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subjectID, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadVCWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*vcr.LoadVCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadVCWithBodyWithResponse indicates an expected call of LoadVCWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) LoadVCWithBodyWithResponse(ctx, subjectID, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subjectID, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadVCWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).LoadVCWithBodyWithResponse), varargs...)
}

// LoadVCWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) LoadVCWithResponse(ctx context.Context, subjectID string, body vcr.LoadVCJSONRequestBody, reqEditors ...vcr.RequestEditorFn) (*vcr.LoadVCResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subjectID, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadVCWithResponse", varargs...)
	ret0, _ := ret[0].(*vcr.LoadVCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadVCWithResponse indicates an expected call of LoadVCWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) LoadVCWithResponse(ctx, subjectID, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subjectID, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadVCWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).LoadVCWithResponse), varargs...)
}

// RemoveCredentialFromWalletWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) RemoveCredentialFromWalletWithResponse(ctx context.Context, subjectID, id string, reqEditors ...vcr.RequestEditorFn) (*vcr.RemoveCredentialFromWalletResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subjectID, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveCredentialFromWalletWithResponse", varargs...)
	ret0, _ := ret[0].(*vcr.RemoveCredentialFromWalletResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveCredentialFromWalletWithResponse indicates an expected call of RemoveCredentialFromWalletWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) RemoveCredentialFromWalletWithResponse(ctx, subjectID, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subjectID, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCredentialFromWalletWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).RemoveCredentialFromWalletWithResponse), varargs...)
}

// ResolveVCWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ResolveVCWithResponse(ctx context.Context, id string, reqEditors ...vcr.RequestEditorFn) (*vcr.ResolveVCResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResolveVCWithResponse", varargs...)
	ret0, _ := ret[0].(*vcr.ResolveVCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveVCWithResponse indicates an expected call of ResolveVCWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ResolveVCWithResponse(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveVCWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ResolveVCWithResponse), varargs...)
}

// RevokeVCWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) RevokeVCWithResponse(ctx context.Context, id string, reqEditors ...vcr.RequestEditorFn) (*vcr.RevokeVCResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeVCWithResponse", varargs...)
	ret0, _ := ret[0].(*vcr.RevokeVCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeVCWithResponse indicates an expected call of RevokeVCWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) RevokeVCWithResponse(ctx, id any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeVCWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).RevokeVCWithResponse), varargs...)
}

// SearchIssuedVCsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SearchIssuedVCsWithResponse(ctx context.Context, params *vcr.SearchIssuedVCsParams, reqEditors ...vcr.RequestEditorFn) (*vcr.SearchIssuedVCsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchIssuedVCsWithResponse", varargs...)
	ret0, _ := ret[0].(*vcr.SearchIssuedVCsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchIssuedVCsWithResponse indicates an expected call of SearchIssuedVCsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SearchIssuedVCsWithResponse(ctx, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchIssuedVCsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SearchIssuedVCsWithResponse), varargs...)
}

// SearchVCsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SearchVCsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...vcr.RequestEditorFn) (*vcr.SearchVCsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchVCsWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*vcr.SearchVCsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchVCsWithBodyWithResponse indicates an expected call of SearchVCsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SearchVCsWithBodyWithResponse(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchVCsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SearchVCsWithBodyWithResponse), varargs...)
}

// SearchVCsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SearchVCsWithResponse(ctx context.Context, body vcr.SearchVCsJSONRequestBody, reqEditors ...vcr.RequestEditorFn) (*vcr.SearchVCsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchVCsWithResponse", varargs...)
	ret0, _ := ret[0].(*vcr.SearchVCsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchVCsWithResponse indicates an expected call of SearchVCsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SearchVCsWithResponse(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchVCsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SearchVCsWithResponse), varargs...)
}

// TrustIssuerWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TrustIssuerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...vcr.RequestEditorFn) (*vcr.TrustIssuerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrustIssuerWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*vcr.TrustIssuerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrustIssuerWithBodyWithResponse indicates an expected call of TrustIssuerWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TrustIssuerWithBodyWithResponse(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrustIssuerWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TrustIssuerWithBodyWithResponse), varargs...)
}

// TrustIssuerWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TrustIssuerWithResponse(ctx context.Context, body vcr.TrustIssuerJSONRequestBody, reqEditors ...vcr.RequestEditorFn) (*vcr.TrustIssuerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrustIssuerWithResponse", varargs...)
	ret0, _ := ret[0].(*vcr.TrustIssuerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrustIssuerWithResponse indicates an expected call of TrustIssuerWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TrustIssuerWithResponse(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrustIssuerWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TrustIssuerWithResponse), varargs...)
}

// UntrustIssuerWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UntrustIssuerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...vcr.RequestEditorFn) (*vcr.UntrustIssuerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntrustIssuerWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*vcr.UntrustIssuerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntrustIssuerWithBodyWithResponse indicates an expected call of UntrustIssuerWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UntrustIssuerWithBodyWithResponse(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntrustIssuerWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UntrustIssuerWithBodyWithResponse), varargs...)
}

// UntrustIssuerWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UntrustIssuerWithResponse(ctx context.Context, body vcr.UntrustIssuerJSONRequestBody, reqEditors ...vcr.RequestEditorFn) (*vcr.UntrustIssuerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntrustIssuerWithResponse", varargs...)
	ret0, _ := ret[0].(*vcr.UntrustIssuerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntrustIssuerWithResponse indicates an expected call of UntrustIssuerWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UntrustIssuerWithResponse(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntrustIssuerWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UntrustIssuerWithResponse), varargs...)
}

// VerifyVCWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) VerifyVCWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...vcr.RequestEditorFn) (*vcr.VerifyVCResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyVCWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*vcr.VerifyVCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyVCWithBodyWithResponse indicates an expected call of VerifyVCWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) VerifyVCWithBodyWithResponse(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyVCWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).VerifyVCWithBodyWithResponse), varargs...)
}

// VerifyVCWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) VerifyVCWithResponse(ctx context.Context, body vcr.VerifyVCJSONRequestBody, reqEditors ...vcr.RequestEditorFn) (*vcr.VerifyVCResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyVCWithResponse", varargs...)
	ret0, _ := ret[0].(*vcr.VerifyVCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyVCWithResponse indicates an expected call of VerifyVCWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) VerifyVCWithResponse(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyVCWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).VerifyVCWithResponse), varargs...)
}

// VerifyVPWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) VerifyVPWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...vcr.RequestEditorFn) (*vcr.VerifyVPResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyVPWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*vcr.VerifyVPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyVPWithBodyWithResponse indicates an expected call of VerifyVPWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) VerifyVPWithBodyWithResponse(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyVPWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).VerifyVPWithBodyWithResponse), varargs...)
}

// VerifyVPWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) VerifyVPWithResponse(ctx context.Context, body vcr.VerifyVPJSONRequestBody, reqEditors ...vcr.RequestEditorFn) (*vcr.VerifyVPResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyVPWithResponse", varargs...)
	ret0, _ := ret[0].(*vcr.VerifyVPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyVPWithResponse indicates an expected call of VerifyVPWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) VerifyVPWithResponse(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyVPWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).VerifyVPWithResponse), varargs...)
}
