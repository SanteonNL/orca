// Copyright 2019 The Samply Development Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import (
	"bytes"
	"encoding/json"
)

// THIS FILE IS GENERATED BY https://github.com/Zorgbijjou/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// FamilyMemberHistory is documented here http://hl7.org/fhir/StructureDefinition/FamilyMemberHistory
type FamilyMemberHistory struct {
	Id                    *string                        `bson:"id,omitempty" json:"id,omitempty"`
	Meta                  *Meta                          `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules         *string                        `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language              *string                        `bson:"language,omitempty" json:"language,omitempty"`
	Text                  *Narrative                     `bson:"text,omitempty" json:"text,omitempty"`
	Contained             json.RawMessage                `bson:"contained,omitempty" json:"contained,omitempty"`
	Extension             []Extension                    `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension     []Extension                    `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Identifier            []Identifier                   `bson:"identifier,omitempty" json:"identifier,omitempty"`
	InstantiatesCanonical []string                       `bson:"instantiatesCanonical,omitempty" json:"instantiatesCanonical,omitempty"`
	InstantiatesUri       []string                       `bson:"instantiatesUri,omitempty" json:"instantiatesUri,omitempty"`
	Status                FamilyHistoryStatus            `bson:"status" json:"status"`
	DataAbsentReason      *CodeableConcept               `bson:"dataAbsentReason,omitempty" json:"dataAbsentReason,omitempty"`
	Patient               Reference                      `bson:"patient" json:"patient"`
	Date                  *string                        `bson:"date,omitempty" json:"date,omitempty"`
	Name                  *string                        `bson:"name,omitempty" json:"name,omitempty"`
	Relationship          CodeableConcept                `bson:"relationship" json:"relationship"`
	Sex                   *CodeableConcept               `bson:"sex,omitempty" json:"sex,omitempty"`
	BornPeriod            *Period                        `bson:"bornPeriod,omitempty" json:"bornPeriod,omitempty"`
	BornDate              *string                        `bson:"bornDate,omitempty" json:"bornDate,omitempty"`
	BornString            *string                        `bson:"bornString,omitempty" json:"bornString,omitempty"`
	AgeAge                *Age                           `bson:"ageAge,omitempty" json:"ageAge,omitempty"`
	AgeRange              *Range                         `bson:"ageRange,omitempty" json:"ageRange,omitempty"`
	AgeString             *string                        `bson:"ageString,omitempty" json:"ageString,omitempty"`
	EstimatedAge          *bool                          `bson:"estimatedAge,omitempty" json:"estimatedAge,omitempty"`
	DeceasedBoolean       *bool                          `bson:"deceasedBoolean,omitempty" json:"deceasedBoolean,omitempty"`
	DeceasedAge           *Age                           `bson:"deceasedAge,omitempty" json:"deceasedAge,omitempty"`
	DeceasedRange         *Range                         `bson:"deceasedRange,omitempty" json:"deceasedRange,omitempty"`
	DeceasedDate          *string                        `bson:"deceasedDate,omitempty" json:"deceasedDate,omitempty"`
	DeceasedString        *string                        `bson:"deceasedString,omitempty" json:"deceasedString,omitempty"`
	ReasonCode            []CodeableConcept              `bson:"reasonCode,omitempty" json:"reasonCode,omitempty"`
	ReasonReference       []Reference                    `bson:"reasonReference,omitempty" json:"reasonReference,omitempty"`
	Note                  []Annotation                   `bson:"note,omitempty" json:"note,omitempty"`
	Condition             []FamilyMemberHistoryCondition `bson:"condition,omitempty" json:"condition,omitempty"`
}
type FamilyMemberHistoryCondition struct {
	Id                 *string          `bson:"id,omitempty" json:"id,omitempty"`
	Extension          []Extension      `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension  []Extension      `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Code               CodeableConcept  `bson:"code" json:"code"`
	Outcome            *CodeableConcept `bson:"outcome,omitempty" json:"outcome,omitempty"`
	ContributedToDeath *bool            `bson:"contributedToDeath,omitempty" json:"contributedToDeath,omitempty"`
	OnsetAge           *Age             `bson:"onsetAge,omitempty" json:"onsetAge,omitempty"`
	OnsetRange         *Range           `bson:"onsetRange,omitempty" json:"onsetRange,omitempty"`
	OnsetPeriod        *Period          `bson:"onsetPeriod,omitempty" json:"onsetPeriod,omitempty"`
	OnsetString        *string          `bson:"onsetString,omitempty" json:"onsetString,omitempty"`
	Note               []Annotation     `bson:"note,omitempty" json:"note,omitempty"`
}
type OtherFamilyMemberHistory FamilyMemberHistory

// MarshalJSON marshals the given FamilyMemberHistory as JSON into a byte slice
func (r FamilyMemberHistory) MarshalJSON() ([]byte, error) {
	buffer := bytes.Buffer{}
	enc := json.NewEncoder(&buffer)
	enc.SetEscapeHTML(false)
	err := enc.Encode(struct {
		OtherFamilyMemberHistory
		ResourceType string `json:"resourceType"`
	}{
		OtherFamilyMemberHistory: OtherFamilyMemberHistory(r),
		ResourceType:             "FamilyMemberHistory",
	})
	return buffer.Bytes(), err
}

// UnmarshalFamilyMemberHistory unmarshals a FamilyMemberHistory.
func UnmarshalFamilyMemberHistory(b []byte) (FamilyMemberHistory, error) {
	var familyMemberHistory FamilyMemberHistory
	if err := json.Unmarshal(b, &familyMemberHistory); err != nil {
		return familyMemberHistory, err
	}
	return familyMemberHistory, nil
}
func (r *FamilyMemberHistory) GetExtension() []Extension {
	return r.Extension
}
func (r *FamilyMemberHistory) SetExtension(extension []Extension) {
	r.Extension = extension
}

var _ HasExtension = (*FamilyMemberHistory)(nil)
