// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// StartExchangeJSONBody defines parameters for StartExchange.
type StartExchangeJSONBody struct {
	// CallbackUrl The URL to which the user agent should be redirected after the exchange has been completed.
	// The exchange_id is appended as a query parameter.
	CallbackUrl string `json:"callback_url"`

	// FhirOperationPath The path and query parameters for the FHIR operation to be executed.
	// For now, the FHIR REST interaction is always a GET request.
	FhirOperationPath string `json:"fhir_operation_path"`

	// Oauth2Scope The OAuth 2.0 scope that is required to perform the data exchange.
	// The scope is used to determine the required user authentication at remote parties.
	// The scope is a string that represents the required access rights.
	Oauth2Scope string `json:"oauth2_scope"`
}

// StartExchangeJSONRequestBody defines body for StartExchange for application/json ContentType.
type StartExchangeJSONRequestBody StartExchangeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Starts an exchange through Orca
	// (POST /exchange)
	StartExchange(ctx echo.Context) error
	// Retrieves the result of an exchange.
	// (GET /exchange/{id}/result)
	GetExchangeResult(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// StartExchange converts echo context to params.
func (w *ServerInterfaceWrapper) StartExchange(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StartExchange(ctx)
	return err
}

// GetExchangeResult converts echo context to params.
func (w *ServerInterfaceWrapper) GetExchangeResult(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetExchangeResult(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/exchange", wrapper.StartExchange)
	router.GET(baseURL+"/exchange/:id/result", wrapper.GetExchangeResult)

}

type StartExchangeRequestObject struct {
	Body *StartExchangeJSONRequestBody
}

type StartExchangeResponseObject interface {
	VisitStartExchangeResponse(w http.ResponseWriter) error
}

type StartExchange200JSONResponse struct {
	// ExchangeId The ID of the exchange. It can be used to retrieve the result.
	ExchangeId string `json:"exchange_id"`
}

func (response StartExchange200JSONResponse) VisitStartExchangeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StartExchange201JSONResponse struct {
	// ExchangeId The ID of the exchange. It can be used to retrieve the result.
	ExchangeId string `json:"exchange_id"`

	// RedirectUrl The URL to which the user agent should be redirected for authentication.
	RedirectUrl string `json:"redirect_url"`
}

func (response StartExchange201JSONResponse) VisitStartExchangeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetExchangeResultRequestObject struct {
	Id string `json:"id"`
}

type GetExchangeResultResponseObject interface {
	VisitGetExchangeResultResponse(w http.ResponseWriter) error
}

type GetExchangeResult200JSONResponse FHIRBundle

func (response GetExchangeResult200JSONResponse) VisitGetExchangeResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetExchangeResult404Response struct {
}

func (response GetExchangeResult404Response) VisitGetExchangeResultResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetExchangeResult409Response struct {
}

func (response GetExchangeResult409Response) VisitGetExchangeResultResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Starts an exchange through Orca
	// (POST /exchange)
	StartExchange(ctx context.Context, request StartExchangeRequestObject) (StartExchangeResponseObject, error)
	// Retrieves the result of an exchange.
	// (GET /exchange/{id}/result)
	GetExchangeResult(ctx context.Context, request GetExchangeResultRequestObject) (GetExchangeResultResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// StartExchange operation middleware
func (sh *strictHandler) StartExchange(ctx echo.Context) error {
	var request StartExchangeRequestObject

	var body StartExchangeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StartExchange(ctx.Request().Context(), request.(StartExchangeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StartExchange")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(StartExchangeResponseObject); ok {
		return validResponse.VisitStartExchangeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetExchangeResult operation middleware
func (sh *strictHandler) GetExchangeResult(ctx echo.Context, id string) error {
	var request GetExchangeResultRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetExchangeResult(ctx.Request().Context(), request.(GetExchangeResultRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetExchangeResult")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetExchangeResultResponseObject); ok {
		return validResponse.VisitGetExchangeResultResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
