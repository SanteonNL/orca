// Code generated by MockGen. DO NOT EDIT.
// Source: channels.go
//
// Generated by this command:
//
//	mockgen -destination=./channels_mock.go -package=subscriptions -source=channels.go
//

// Package subscriptions is a generated GoMock package.
package subscriptions

import (
	context "context"
	reflect "reflect"

	coolfhir "github.com/SanteonNL/orca/orchestrator/lib/coolfhir"
	fhir "github.com/zorgbijjou/golang-fhir-models/fhir-models/fhir"
	gomock "go.uber.org/mock/gomock"
)

// MockChannelFactory is a mock of ChannelFactory interface.
type MockChannelFactory struct {
	ctrl     *gomock.Controller
	recorder *MockChannelFactoryMockRecorder
	isgomock struct{}
}

// MockChannelFactoryMockRecorder is the mock recorder for MockChannelFactory.
type MockChannelFactoryMockRecorder struct {
	mock *MockChannelFactory
}

// NewMockChannelFactory creates a new mock instance.
func NewMockChannelFactory(ctrl *gomock.Controller) *MockChannelFactory {
	mock := &MockChannelFactory{ctrl: ctrl}
	mock.recorder = &MockChannelFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelFactory) EXPECT() *MockChannelFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockChannelFactory) Create(ctx context.Context, subscriber fhir.Identifier) (Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, subscriber)
	ret0, _ := ret[0].(Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockChannelFactoryMockRecorder) Create(ctx, subscriber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChannelFactory)(nil).Create), ctx, subscriber)
}

// MockChannel is a mock of Channel interface.
type MockChannel struct {
	ctrl     *gomock.Controller
	recorder *MockChannelMockRecorder
	isgomock struct{}
}

// MockChannelMockRecorder is the mock recorder for MockChannel.
type MockChannelMockRecorder struct {
	mock *MockChannel
}

// NewMockChannel creates a new mock instance.
func NewMockChannel(ctrl *gomock.Controller) *MockChannel {
	mock := &MockChannel{ctrl: ctrl}
	mock.recorder = &MockChannelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannel) EXPECT() *MockChannelMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MockChannel) Notify(ctx context.Context, notification coolfhir.SubscriptionNotification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockChannelMockRecorder) Notify(ctx, notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockChannel)(nil).Notify), ctx, notification)
}
