// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -destination=./policy_agent_mock.go -package=careplanservice -source=service.go PolicyAgent
//

// Package careplanservice is a generated GoMock package.
package careplanservice

import (
	context "context"
	http "net/http"
	reflect "reflect"

	policy "github.com/SanteonNL/orca/orchestrator/careplanservice/policy"
	gomock "go.uber.org/mock/gomock"
)

// MockPolicyAgent is a mock of PolicyAgent interface.
type MockPolicyAgent struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyAgentMockRecorder
	isgomock struct{}
}

// MockPolicyAgentMockRecorder is the mock recorder for MockPolicyAgent.
type MockPolicyAgentMockRecorder struct {
	mock *MockPolicyAgent
}

// NewMockPolicyAgent creates a new mock instance.
func NewMockPolicyAgent(ctrl *gomock.Controller) *MockPolicyAgent {
	mock := &MockPolicyAgent{ctrl: ctrl}
	mock.recorder = &MockPolicyAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyAgent) EXPECT() *MockPolicyAgentMockRecorder {
	return m.recorder
}

// Allow mocks base method.
func (m *MockPolicyAgent) Allow(ctx context.Context, context *policy.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allow", ctx, context)
	ret0, _ := ret[0].(error)
	return ret0
}

// Allow indicates an expected call of Allow.
func (mr *MockPolicyAgentMockRecorder) Allow(ctx, context any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allow", reflect.TypeOf((*MockPolicyAgent)(nil).Allow), ctx, context)
}

// Preflight mocks base method.
func (m *MockPolicyAgent) Preflight(resourceType, id string, r *http.Request) (*policy.Preflight, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Preflight", resourceType, id, r)
	ret0, _ := ret[0].(*policy.Preflight)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Preflight indicates an expected call of Preflight.
func (mr *MockPolicyAgentMockRecorder) Preflight(resourceType, id, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preflight", reflect.TypeOf((*MockPolicyAgent)(nil).Preflight), resourceType, id, r)
}

// PrepareContext mocks base method.
func (m *MockPolicyAgent) PrepareContext(ctx context.Context, cache policy.SearchCache, preflight *policy.Preflight, resource any) (*policy.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareContext", ctx, cache, preflight, resource)
	ret0, _ := ret[0].(*policy.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContext indicates an expected call of PrepareContext.
func (mr *MockPolicyAgentMockRecorder) PrepareContext(ctx, cache, preflight, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContext", reflect.TypeOf((*MockPolicyAgent)(nil).PrepareContext), ctx, cache, preflight, resource)
}
