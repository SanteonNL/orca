// Code generated by MockGen. DO NOT EDIT.
// Source: authz.go
//
// Generated by this command:
//
//	mockgen -destination=./authz_mock.go -package=careplanservice -source authz.go
//

// Package careplanservice is a generated GoMock package.
package careplanservice

import (
	context "context"
	reflect "reflect"

	auth "github.com/SanteonNL/orca/orchestrator/lib/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockPolicy is a mock of Policy interface.
type MockPolicy[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyMockRecorder[T]
	isgomock struct{}
}

// MockPolicyMockRecorder is the mock recorder for MockPolicy.
type MockPolicyMockRecorder[T any] struct {
	mock *MockPolicy[T]
}

// NewMockPolicy creates a new mock instance.
func NewMockPolicy[T any](ctrl *gomock.Controller) *MockPolicy[T] {
	mock := &MockPolicy[T]{ctrl: ctrl}
	mock.recorder = &MockPolicyMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicy[T]) EXPECT() *MockPolicyMockRecorder[T] {
	return m.recorder
}

// HasAccess mocks base method.
func (m *MockPolicy[T]) HasAccess(ctx context.Context, resource T, principal auth.Principal) (*PolicyDecision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasAccess", ctx, resource, principal)
	ret0, _ := ret[0].(*PolicyDecision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasAccess indicates an expected call of HasAccess.
func (mr *MockPolicyMockRecorder[T]) HasAccess(ctx, resource, principal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAccess", reflect.TypeOf((*MockPolicy[T])(nil).HasAccess), ctx, resource, principal)
}
