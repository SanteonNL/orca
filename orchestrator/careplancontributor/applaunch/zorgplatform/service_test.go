package zorgplatform

import (
	"crypto/rand"
	"crypto/rsa"
	"crypto/sha256"
	"encoding/base64"
	"encoding/hex"
	"fmt"
	"github.com/SanteonNL/orca/orchestrator/lib/az/azkeyvault"
	"github.com/SanteonNL/orca/orchestrator/lib/crypto"
	"github.com/SanteonNL/orca/orchestrator/user"
	"github.com/stretchr/testify/require"
	"net/http"
	"net/http/httptest"
	"net/url"
	"os"
	"strings"
	"testing"
)

func TestService(t *testing.T) {
	httpServerMux := http.NewServeMux()
	httpServer := httptest.NewTLSServer(httpServerMux)

	keyVault := azkeyvault.NewTestServer()
	keyVault.AddCertificate("client-cert", &httpServer.TLS.Certificates[0])
	signKeyPair, _ := rsa.GenerateKey(rand.Reader, 2048)
	keyVault.AddKey("sign-cert", signKeyPair)
	encryptionKeyPair, _ := rsa.GenerateKey(rand.Reader, 2048)
	keyVault.AddKey("decrypt-cert", encryptionKeyPair)
	azkeyvault.AzureHttpRequestDoer = keyVault.TestHttpServer.Client()

	zorgplatformHttpServerMux := http.NewServeMux()
	zorgplatformHttpServer := httptest.NewServer(zorgplatformHttpServerMux)
	zorgplatformHttpServerMux.Handle("POST /sts", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// TODO: Handle
		w.WriteHeader(http.StatusOK)
	}))
	zorgplatformHttpServerMux.Handle("POST /api", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// TODO: Handle
		w.WriteHeader(http.StatusOK)
	}))

	cfg := Config{
		Enabled:  true,
		ApiUrl:   zorgplatformHttpServer.URL + "/api",
		StsUrl:   zorgplatformHttpServer.URL + "/sts",
		Issuer:   zorgplatformHttpServer.URL,
		Audience: httpServer.URL,
		AzureConfig: AzureConfig{
			CredentialType: "default",
			KeyVaultConfig: AzureKeyVaultConfig{
				KeyVaultURL:     keyVault.TestHttpServer.URL,
				DecryptCertName: "decrypt-cert",
				SignCertName:    "sign-cert",
				ClientCertName:  "client-cert",
				AllowInsecure:   true,
			},
		},
	}

	service, err := New(user.NewSessionManager(), cfg, httpServer.URL, "/")
	require.NoError(t, err)
	service.RegisterHandlers(httpServerMux)

	response, err := httpServer.Client().PostForm(httpServer.URL+"/zorgplatform-app-launch", url.Values{
		"SAMLResponse": {createSAMLResponse(t, encryptionKeyPair.PublicKey)},
	})
	require.NoError(t, err)
	require.Equal(t, http.StatusOK, response.StatusCode)
}

func createSAMLResponse(t *testing.T, encryptionKey rsa.PublicKey) string {
	encryptedDecryptionKey, encryptedAssertion := createEncryptedAssertion(t, encryptionKey)
	samlResponseBytes, err := os.ReadFile("saml_response_input.xml")
	require.NoError(t, err)
	samlResponse := string(samlResponseBytes)
	samlResponse = strings.Replace(samlResponse, "!!ASSERTION_ENCRYPTED_BASE64!!", encryptedAssertion, 1)
	samlResponse = strings.Replace(samlResponse, "!!ASSERTION_ENCRYPTIONKEY_ENCRYPTED_BASE64!!", encryptedDecryptionKey, 1)
	println(samlResponse)
	return samlResponse
}

// createEncryptedAssertion creates an encrypted assertion using the given public key.
// It returns the encrypted symmetric key and the encrypted assertion.
func createEncryptedAssertion(t *testing.T, encryptionKey rsa.PublicKey) (string, string) {
	plainText, err := os.ReadFile("saml_assertion_input.xml")
	require.NoError(t, err)

	// Steps:
	// - Generate symmetric encryption key
	// - Encrypt assertion with this key (AES-CBC), see https://gist.github.com/locked/b066aa1ddeb2b28e855e
	// - Encrypt symmetric key with public key (RSA)
	aesKey, messageCipherText, err := crypto.EncryptAesCbc(plainText, 32)
	require.NoError(t, err)
	fmt.Printf("AES Key: %s\n", hex.EncodeToString(aesKey))
	fmt.Printf("AES CipherText: %s\n", hex.EncodeToString(messageCipherText))

	encryptedKeyCipherText, err := rsa.EncryptOAEP(sha256.New(), rand.Reader, &encryptionKey, aesKey, nil)
	require.NoError(t, err)
	return base64.StdEncoding.EncodeToString(encryptedKeyCipherText), base64.StdEncoding.EncodeToString(messageCipherText)
}

func TestLength(t *testing.T) {
	const input = `WNF6gg8MnWz5EQH5u0IKagdFIB+dv7zfejf8BL4uVS2pNk3EHqQbODEYfVwchupzyphE8VsdpkwHA9BivleKAv+TOUhy9UY4vx6xm1yddsvTI6HVMhz7Fq+9U+pym/uqr11MomXk4dbCN6hcx5AruMJwSYYxKwiKLPEPVr8Sf1xnubUNZFoE3yZGBvKxXxZ8eMnfNTdRmMi/ID3p0zAudaZZgBYqUrgUHQheuNIJsFCEkMY1Dm5BAb1RDs1kFbpTVK3yyZEfDfR6uoHx65CAJPiSx6PDcOyS5px/ILXgDN9qzfH8ieY0cn2m8NFt407wmaIAfQMEOZqoYB3XM1L1xw==`
	decodeString, err := base64.StdEncoding.DecodeString(input)
	require.NoError(t, err)
	println(len(decodeString))
}

// const samlResponse = `SAMLResponse=PHRydXN0OlJlcXVlc3RTZWN1cml0eVRva2VuUmVzcG9uc2VDb2xsZWN0aW9uIHhtbG5zOnRydXN0PSJodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy93cy1zeC93cy10cnVzdC8yMDA1MTIiPjx0cnVzdDpSZXF1ZXN0U2VjdXJpdHlUb2tlblJlc3BvbnNlPjx0cnVzdDpMaWZldGltZT48d3N1OkNyZWF0ZWQgeG1sbnM6d3N1PSJodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy93c3MvMjAwNC8wMS9vYXNpcy0yMDA0MDEtd3NzLXdzc2VjdXJpdHktdXRpbGl0eS0xLjAueHNkIj4yMDI0LTEwLTEwVDA0OjU2OjA5LjE3NVo8L3dzdTpDcmVhdGVkPjx3c3U6RXhwaXJlcyB4bWxuczp3c3U9Imh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL3dzcy8yMDA0LzAxL29hc2lzLTIwMDQwMS13c3Mtd3NzZWN1cml0eS11dGlsaXR5LTEuMC54c2QiPjIwMjQtMTAtMTBUMDU6MDg6MDkuMTc1Wjwvd3N1OkV4cGlyZXM%2BPC90cnVzdDpMaWZldGltZT48d3NwOkFwcGxpZXNUbyB4bWxuczp3c3A9Imh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDQvMDkvcG9saWN5Ij48d3NhOkVuZHBvaW50UmVmZXJlbmNlIHhtbG5zOndzYT0iaHR0cDovL3d3dy53My5vcmcvMjAwNS8wOC9hZGRyZXNzaW5nIj48d3NhOkFkZHJlc3M%2BaHR0cHM6Ly96b3JncGxhdGZvcm0udGVzdC5pbnRlZ3JhdGlvbi56b3JnYmlqam91LmNvbS88L3dzYTpBZGRyZXNzPjwvd3NhOkVuZHBvaW50UmVmZXJlbmNlPjwvd3NwOkFwcGxpZXNUbz48dHJ1c3Q6UmVxdWVzdGVkU2VjdXJpdHlUb2tlbj48RW5jcnlwdGVkQXNzZXJ0aW9uIHhtbG5zPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj48eGVuYzpFbmNyeXB0ZWREYXRhIFR5cGU9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI0VsZW1lbnQiIHhtbG5zOnhlbmM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jIyI%2BPHhlbmM6RW5jcnlwdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI2FlczI1Ni1jYmMiLz48S2V5SW5mbyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BPGU6RW5jcnlwdGVkS2V5IHhtbG5zOmU9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jIyI%2BPGU6RW5jcnlwdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3JzYS1vYWVwLW1nZjFwIj48RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz48L2U6RW5jcnlwdGlvbk1ldGhvZD48S2V5SW5mbz48bzpTZWN1cml0eVRva2VuUmVmZXJlbmNlIHhtbG5zOm89Imh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL3dzcy8yMDA0LzAxL29hc2lzLTIwMDQwMS13c3Mtd3NzZWN1cml0eS1zZWNleHQtMS4wLnhzZCI%2BPFg1MDlEYXRhPjxYNTA5SXNzdWVyU2VyaWFsPjxYNTA5SXNzdWVyTmFtZT5DTj1HbyBEYWRkeSBTZWN1cmUgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IC0gRzIsIE9VPWh0dHA6Ly9jZXJ0cy5nb2RhZGR5LmNvbS9yZXBvc2l0b3J5LywgTz0iR29EYWRkeS5jb20sIEluYy4iLCBMPVNjb3R0c2RhbGUsIFM9QXJpem9uYSwgQz1VUzwvWDUwOUlzc3Vlck5hbWU%2BPFg1MDlTZXJpYWxOdW1iZXI%2BNDczMzkzNTIzMDk4MDYxMDIyNzwvWDUwOVNlcmlhbE51bWJlcj48L1g1MDlJc3N1ZXJTZXJpYWw%2BPC9YNTA5RGF0YT48L286U2VjdXJpdHlUb2tlblJlZmVyZW5jZT48L0tleUluZm8%%2BPFNlY3VyaXR5VG9rZW5SZWZlcmVuY2UgYjpUb2tlblR5cGU9Imh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL3dzcy9vYXNpcy13c3Mtc2FtbC10b2tlbi1wcm9maWxlLTEuMSNTQU1MVjIuMCIgeG1sbnM9Imh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL3dzcy8yMDA0LzAxL29hc2lzLTIwMDQwMS13c3Mtd3NzZWN1cml0eS1zZWNleHQtMS4wLnhzZCIgeG1sbnM6Yj0iaHR0cDovL2RvY3Mub2FzaXMtb3Blbi5vcmcvd3NzL29hc2lzLXdzcy13c3NlY3VyaXR5LXNlY2V4dC0xLjEueHNkIj48S2V5SWRlbnRpZmllciBWYWx1ZVR5cGU9Imh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL3dzcy9vYXNpcy13c3Mtc2FtbC10b2tlbi1wcm9maWxlLTEuMSNTQU1MSUQiPl82M2EyZmZlOS0yZjlmLTQzZDYtYmE3NS04NDg4YmRjM2YyMGQ8L0tleUlkZW50aWZpZXI%2BPC9TZWN1cml0eVRva2VuUmVmZXJlbmNlPjwvdHJ1c3Q6UmVxdWVzdGVkQXR0YWNoZWRSZWZlcmVuY2U%2BPHRydXN0OlJlcXVlc3RlZFVuYXR0YWNoZWRSZWZlcmVuY2U%2BPFNlY3VyaXR5VG9rZW5SZWZlcmVuY2UgYjpUb2tlblR5cGU9Imh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL3dzcy9vYXNpcy13c3Mtc2FtbC10b2tlbi1wcm9maWxlLTEuMSNTQU1MVjIuMCIgeG1sbnM9Imh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL3dzcy8yMDA0LzAxL29hc2lzLTIwMDQwMS13c3Mtd3NzZWN1cml0eS1zZWNleHQtMS4wLnhzZCIgeG1sbnM6Yj0iaHR0cDovL2RvY3Mub2FzaXMtb3Blbi5vcmcvd3NzL29hc2lzLXdzcy13c3NlY3VyaXR5LXNlY2V4dC0xLjEueHNkIj48S2V5SWRlbnRpZmllciBWYWx1ZVR5cGU9Imh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL3dzcy9vYXNpcy13c3Mtc2FtbC10b2tlbi1wcm9maWxlLTEuMSNTQU1MSUQiPl82M2EyZmZlOS0yZjlmLTQzZDYtYmE3NS04NDg4YmRjM2YyMGQ8L0tleUlkZW50aWZpZXI%2BPC9TZWN1cml0eVRva2VuUmVmZXJlbmNlPjwvdHJ1c3Q6UmVxdWVzdGVkVW5hdHRhY2hlZFJlZmVyZW5jZT48dHJ1c3Q6VG9rZW5UeXBlPmh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL3dzcy9vYXNpcy13c3Mtc2FtbC10b2tlbi1wcm9maWxlLTEuMSNTQU1MVjIuMDwvdHJ1c3Q6VG9rZW5UeXBlPjx0cnVzdDpSZXF1ZXN0VHlwZT5odHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy93cy1zeC93cy10cnVzdC8yMDA1MTIvSXNzdWU8L3RydXN0OlJlcXVlc3RUeXBlPjx0cnVzdDpLZXlUeXBlPmh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL3dzLXN4L3dzLXRydXN0LzIwMDUxMi9CZWFyZXI8L3RydXN0OktleVR5cGU%2BPC90cnVzdDpSZXF1ZXN0U2VjdXJpdHlUb2tlblJlc3BvbnNlPjwvdHJ1c3Q6UmVxdWVzdFNlY3VyaXR5VG9rZW5SZXNwb25zZUNvbGxlY3Rpb24%2B`
const samlResponse = `SAMLResponse=PHRydXN0OlJlcXVlc3RTZWN1cml0eVRva2VuUmVzcG9uc2VDb2xsZWN0aW9uIHhtbG5zOnRydXN0PSJodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy93cy1zeC93cy10cnVzdC8yMDA1MTIiPjx0cnVzdDpSZXF1ZXN0U2VjdXJpdHlUb2tlblJlc3BvbnNlPjx0cnVzdDpMaWZldGltZT48d3N1OkNyZWF0ZWQgeG1sbnM6d3N1PSJodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy93c3MvMjAwNC8wMS9vYXNpcy0yMDA0MDEtd3NzLXdzc2VjdXJpdHktdXRpbGl0eS0xLjAueHNkIj4yMDI0LTEwLTEwVDA0OjU2OjA5LjE3NVo8L3dzdTpDcmVhdGVkPjx3c3U6RXhwaXJlcyB4bWxuczp3c3U9Imh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL3dzcy8yMDA0LzAxL29hc2lzLTIwMDQwMS13c3Mtd3NzZWN1cml0eS11dGlsaXR5LTEuMC54c2QiPjIwMjQtMTAtMTBUMDU6MDg6MDkuMTc1Wjwvd3N1OkV4cGlyZXM%2BPC90cnVzdDpMaWZldGltZT48d3NwOkFwcGxpZXNUbyB4bWxuczp3c3A9Imh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDQvMDkvcG9saWN5Ij48d3NhOkVuZHBvaW50UmVmZXJlbmNlIHhtbG5zOndzYT0iaHR0cDovL3d3dy53My5vcmcvMjAwNS8wOC9hZGRyZXNzaW5nIj48d3NhOkFkZHJlc3M%2BaHR0cHM6Ly96b3JncGxhdGZvcm0udGVzdC5pbnRlZ3JhdGlvbi56b3JnYmlqam91LmNvbS88L3dzYTpBZGRyZXNzPjwvd3NhOkVuZHBvaW50UmVmZXJlbmNlPjwvd3NwOkFwcGxpZXNUbz48dHJ1c3Q6UmVxdWVzdGVkU2VjdXJpdHlUb2tlbj48RW5jcnlwdGVkQXNzZXJ0aW9uIHhtbG5zPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj48eGVuYzpFbmNyeXB0ZWREYXRhIFR5cGU9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI0VsZW1lbnQiIHhtbG5zOnhlbmM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jIyI%2BPHhlbmM6RW5jcnlwdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI2FlczI1Ni1jYmMiLz48S2V5SW5mbyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BPGU6RW5jcnlwdGVkS2V5IHhtbG5zOmU9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jIyI%2BPGU6RW5jcnlwdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3JzYS1vYWVwLW1nZjFwIj48RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz48L2U6RW5jcnlwdGlvbk1ldGhvZD48S2V5SW5mbz48bzpTZWN1cml0eVRva2VuUmVmZXJlbmNlIHhtbG5zOm89Imh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL3dzcy8yMDA0LzAxL29hc2lzLTIwMDQwMS13c3Mtd3NzZWN1cml0eS1zZWNleHQtMS4wLnhzZCI%2BPFg1MDlEYXRhPjxYNTA5SXNzdWVyU2VyaWFsPjxYNTA5SXNzdWVyTmFtZT5DTj1HbyBEYWRkeSBTZWN1cmUgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IC0gRzIsIE9VPWh0dHA6Ly9jZXJ0cy5nb2RhZGR5LmNvbS9yZXBvc2l0b3J5LywgTz0iR29EYWRkeS5jb20sIEluYy4iLCBMPVNjb3R0c2RhbGUsIFM9QXJpem9uYSwgQz1VUzwvWDUwOUlzc3Vlck5hbWU%2BPFg1MDlTZXJpYWxOdW1iZXI%2BNDczMzkzNTIzMDk4MDYxMDIyNzwvWDUwOVNlcmlhbE51bWJlcj48L1g1MDlJc3N1ZXJTZXJpYWw%2BPC9YNTA5RGF0YT48L286U2VjdXJpdHlUb2tlblJlZmVyZW5jZT48L0tleUluZm8%%2BPFNlY3VyaXR5VG9rZW5SZWZlcmVuY2UgYjpUb2tlblR5cGU9Imh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL3dzcy9vYXNpcy13c3Mtc2FtbC10b2tlbi1wcm9maWxlLTEuMSNTQU1MVjIuMCIgeG1sbnM9Imh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL3dzcy8yMDA0LzAxL29hc2lzLTIwMDQwMS13c3Mtd3NzZWN1cml0eS1zZWNleHQtMS4wLnhzZCIgeG1sbnM6Yj0iaHR0cDovL2RvY3Mub2FzaXMtb3Blbi5vcmcvd3NzL29hc2lzLXdzcy13c3NlY3VyaXR5LXNlY2V4dC0xLjEueHNkIj48S2V5SWRlbnRpZmllciBWYWx1ZVR5cGU9Imh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL3dzcy9vYXNpcy13c3Mtc2FtbC10b2tlbi1wcm9maWxlLTEuMSNTQU1MSUQiPl82M2EyZmZlOS0yZjlmLTQzZDYtYmE3NS04NDg4YmRjM2YyMGQ8L0tleUlkZW50aWZpZXI%2BPC9TZWN1cml0eVRva2VuUmVmZXJlbmNlPjwvdHJ1c3Q6UmVxdWVzdGVkQXR0YWNoZWRSZWZlcmVuY2U%2BPHRydXN0OlJlcXVlc3RlZFVuYXR0YWNoZWRSZWZlcmVuY2U%2BPFNlY3VyaXR5VG9rZW5SZWZlcmVuY2UgYjpUb2tlblR5cGU9Imh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL3dzcy9vYXNpcy13c3Mtc2FtbC10b2tlbi1wcm9maWxlLTEuMSNTQU1MVjIuMCIgeG1sbnM9Imh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL3dzcy8yMDA0LzAxL29hc2lzLTIwMDQwMS13c3Mtd3NzZWN1cml0eS1zZWNleHQtMS4wLnhzZCIgeG1sbnM6Yj0iaHR0cDovL2RvY3Mub2FzaXMtb3Blbi5vcmcvd3NzL29hc2lzLXdzcy13c3NlY3VyaXR5LXNlY2V4dC0xLjEueHNkIj48S2V5SWRlbnRpZmllciBWYWx1ZVR5cGU9Imh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL3dzcy9vYXNpcy13c3Mtc2FtbC10b2tlbi1wcm9maWxlLTEuMSNTQU1MSUQiPl82M2EyZmZlOS0yZjlmLTQzZDYtYmE3NS04NDg4YmRjM2YyMGQ8L0tleUlkZW50aWZpZXI%2BPC9TZWN1cml0eVRva2VuUmVmZXJlbmNlPjwvdHJ1c3Q6UmVxdWVzdGVkVW5hdHRhY2hlZFJlZmVyZW5jZT48dHJ1c3Q6VG9rZW5UeXBlPmh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL3dzcy9vYXNpcy13c3Mtc2FtbC10b2tlbi1wcm9maWxlLTEuMSNTQU1MVjIuMDwvdHJ1c3Q6VG9rZW5UeXBlPjx0cnVzdDpSZXF1ZXN0VHlwZT5odHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy93cy1zeC93cy10cnVzdC8yMDA1MTIvSXNzdWU8L3RydXN0OlJlcXVlc3RUeXBlPjx0cnVzdDpLZXlUeXBlPmh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL3dzLXN4L3dzLXRydXN0LzIwMDUxMi9CZWFyZXI8L3RydXN0OktleVR5cGU%2BPC90cnVzdDpSZXF1ZXN0U2VjdXJpdHlUb2tlblJlc3BvbnNlPjwvdHJ1c3Q6UmVxdWVzdFNlY3VyaXR5VG9rZW5SZXNwb25zZUNvbGxlY3Rpb24%2B`
