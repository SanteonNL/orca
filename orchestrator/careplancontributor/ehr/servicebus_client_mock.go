// Code generated by MockGen. DO NOT EDIT.
// Source: servicebus_client.go
//
// Generated by this command:
//
//	mockgen -destination=./servicebus_client_mock.go -package=ehr -source=servicebus_client.go
//

// Package ehr is a generated GoMock package.
package ehr

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServiceBusClient is a mock of ServiceBusClient interface.
type MockServiceBusClient struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBusClientMockRecorder
	isgomock struct{}
}

// MockServiceBusClientMockRecorder is the mock recorder for MockServiceBusClient.
type MockServiceBusClientMockRecorder struct {
	mock *MockServiceBusClient
}

// NewMockServiceBusClient creates a new mock instance.
func NewMockServiceBusClient(ctrl *gomock.Controller) *MockServiceBusClient {
	mock := &MockServiceBusClient{ctrl: ctrl}
	mock.recorder = &MockServiceBusClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBusClient) EXPECT() *MockServiceBusClientMockRecorder {
	return m.recorder
}

// SubmitMessage mocks base method.
func (m *MockServiceBusClient) SubmitMessage(ctx context.Context, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitMessage", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitMessage indicates an expected call of SubmitMessage.
func (mr *MockServiceBusClientMockRecorder) SubmitMessage(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitMessage", reflect.TypeOf((*MockServiceBusClient)(nil).SubmitMessage), ctx, key, value)
}
