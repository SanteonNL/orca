// Code generated by MockGen. DO NOT EDIT.
// Source: client_wrapper.go
//
// Generated by this command:
//
//	mockgen -destination=./client_wrapper_mock.go -package=ehr -source=client_wrapper.go
//

// Package ehr is a generated GoMock package.
package ehr

import (
	context "context"
	reflect "reflect"

	azservicebus "github.com/Azure/azure-sdk-for-go/sdk/messaging/azservicebus"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceBusClientWrapper is a mock of ServiceBusClientWrapper interface.
type MockServiceBusClientWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBusClientWrapperMockRecorder
	isgomock struct{}
}

// MockServiceBusClientWrapperMockRecorder is the mock recorder for MockServiceBusClientWrapper.
type MockServiceBusClientWrapperMockRecorder struct {
	mock *MockServiceBusClientWrapper
}

// NewMockServiceBusClientWrapper creates a new mock instance.
func NewMockServiceBusClientWrapper(ctrl *gomock.Controller) *MockServiceBusClientWrapper {
	mock := &MockServiceBusClientWrapper{ctrl: ctrl}
	mock.recorder = &MockServiceBusClientWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBusClientWrapper) EXPECT() *MockServiceBusClientWrapperMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockServiceBusClientWrapper) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockServiceBusClientWrapperMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockServiceBusClientWrapper)(nil).Close), ctx)
}

// SendMessage mocks base method.
func (m *MockServiceBusClientWrapper) SendMessage(ctx context.Context, message *azservicebus.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockServiceBusClientWrapperMockRecorder) SendMessage(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockServiceBusClientWrapper)(nil).SendMessage), ctx, message)
}
