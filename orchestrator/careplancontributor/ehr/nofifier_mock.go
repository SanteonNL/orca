// Code generated by MockGen. DO NOT EDIT.
// Source: careplancontributor/ehr/notifier.go
//
// Generated by this command:
//
//	mockgen -destination=careplancontributor/ehr/nofifier_mock.go -package=ehr -source=careplancontributor/ehr/notifier.go
//

// Package ehr is a generated GoMock package.
package ehr

import (
	reflect "reflect"

	fhirclient "github.com/SanteonNL/go-fhir-client"
	fhir "github.com/zorgbijjou/golang-fhir-models/fhir-models/fhir"
	gomock "go.uber.org/mock/gomock"
)

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// NotifyTaskAccepted mocks base method.
func (m *MockNotifier) NotifyTaskAccepted(cpsClient fhirclient.Client, task *fhir.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyTaskAccepted", cpsClient, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyTaskAccepted indicates an expected call of NotifyTaskAccepted.
func (mr *MockNotifierMockRecorder) NotifyTaskAccepted(cpsClient, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyTaskAccepted", reflect.TypeOf((*MockNotifier)(nil).NotifyTaskAccepted), cpsClient, task)
}
