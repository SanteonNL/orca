// Code generated by MockGen. DO NOT EDIT.
// Source: kgo_client.go
//
// Generated by this command:
//
//	mockgen -destination=./kgo_client_mock.go -package=ehr -source=kgo_client.go
//

// Package ehr is a generated GoMock package.
package ehr

import (
	context "context"
	reflect "reflect"

	kgo "github.com/twmb/franz-go/pkg/kgo"
	gomock "go.uber.org/mock/gomock"
)

// MockKgoClient is a mock of KgoClient interface.
type MockKgoClient struct {
	ctrl     *gomock.Controller
	recorder *MockKgoClientMockRecorder
	isgomock struct{}
}

// MockKgoClientMockRecorder is the mock recorder for MockKgoClient.
type MockKgoClientMockRecorder struct {
	mock *MockKgoClient
}

// NewMockKgoClient creates a new mock instance.
func NewMockKgoClient(ctrl *gomock.Controller) *MockKgoClient {
	mock := &MockKgoClient{ctrl: ctrl}
	mock.recorder = &MockKgoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKgoClient) EXPECT() *MockKgoClientMockRecorder {
	return m.recorder
}

// Flush mocks base method.
func (m *MockKgoClient) Flush(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockKgoClientMockRecorder) Flush(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockKgoClient)(nil).Flush), ctx)
}

// Ping mocks base method.
func (m *MockKgoClient) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockKgoClientMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockKgoClient)(nil).Ping), ctx)
}

// ProduceSync mocks base method.
func (m *MockKgoClient) ProduceSync(ctx context.Context, rs ...*kgo.Record) kgo.ProduceResults {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range rs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProduceSync", varargs...)
	ret0, _ := ret[0].(kgo.ProduceResults)
	return ret0
}

// ProduceSync indicates an expected call of ProduceSync.
func (mr *MockKgoClientMockRecorder) ProduceSync(ctx any, rs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, rs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceSync", reflect.TypeOf((*MockKgoClient)(nil).ProduceSync), varargs...)
}
