// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SanteonNL/go-fhir-client (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=./mock/fhirclient_mock.go -package=mock github.com/SanteonNL/go-fhir-client Client
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	url "net/url"
	reflect "reflect"

	fhirclient "github.com/SanteonNL/go-fhir-client"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClient) Create(resource, result any, opts ...fhirclient.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{resource, result}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockClientMockRecorder) Create(resource, result any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{resource, result}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClient)(nil).Create), varargs...)
}

// CreateWithContext mocks base method.
func (m *MockClient) CreateWithContext(ctx context.Context, resource, result any, opts ...fhirclient.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, resource, result}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWithContext indicates an expected call of CreateWithContext.
func (mr *MockClientMockRecorder) CreateWithContext(ctx, resource, result any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, resource, result}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithContext", reflect.TypeOf((*MockClient)(nil).CreateWithContext), varargs...)
}

// Delete mocks base method.
func (m *MockClient) Delete(path string, opts ...fhirclient.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{path}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClientMockRecorder) Delete(path any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{path}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClient)(nil).Delete), varargs...)
}

// DeleteWithContext mocks base method.
func (m *MockClient) DeleteWithContext(ctx context.Context, path string, opts ...fhirclient.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, path}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWithContext indicates an expected call of DeleteWithContext.
func (mr *MockClientMockRecorder) DeleteWithContext(ctx, path any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, path}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWithContext", reflect.TypeOf((*MockClient)(nil).DeleteWithContext), varargs...)
}

// Path mocks base method.
func (m *MockClient) Path(path ...string) *url.URL {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range path {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Path", varargs...)
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockClientMockRecorder) Path(path ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockClient)(nil).Path), path...)
}

// Read mocks base method.
func (m *MockClient) Read(path string, target any, opts ...fhirclient.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{path, target}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockClientMockRecorder) Read(path, target any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{path, target}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockClient)(nil).Read), varargs...)
}

// ReadWithContext mocks base method.
func (m *MockClient) ReadWithContext(ctx context.Context, path string, target any, opts ...fhirclient.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, path, target}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadWithContext indicates an expected call of ReadWithContext.
func (mr *MockClientMockRecorder) ReadWithContext(ctx, path, target any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, path, target}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWithContext", reflect.TypeOf((*MockClient)(nil).ReadWithContext), varargs...)
}

// Search mocks base method.
func (m *MockClient) Search(resourceType string, query url.Values, target any, opts ...fhirclient.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{resourceType, query, target}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockClientMockRecorder) Search(resourceType, query, target any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{resourceType, query, target}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockClient)(nil).Search), varargs...)
}

// SearchWithContext mocks base method.
func (m *MockClient) SearchWithContext(ctx context.Context, resourceType string, query url.Values, target any, opts ...fhirclient.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, resourceType, query, target}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchWithContext indicates an expected call of SearchWithContext.
func (mr *MockClientMockRecorder) SearchWithContext(ctx, resourceType, query, target any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, resourceType, query, target}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchWithContext", reflect.TypeOf((*MockClient)(nil).SearchWithContext), varargs...)
}

// Update mocks base method.
func (m *MockClient) Update(path string, resource, result any, opts ...fhirclient.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{path, resource, result}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockClientMockRecorder) Update(path, resource, result any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{path, resource, result}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClient)(nil).Update), varargs...)
}

// UpdateWithContext mocks base method.
func (m *MockClient) UpdateWithContext(ctx context.Context, path string, resource, result any, opts ...fhirclient.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, path, resource, result}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWithContext indicates an expected call of UpdateWithContext.
func (mr *MockClientMockRecorder) UpdateWithContext(ctx, path, resource, result any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, path, resource, result}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithContext", reflect.TypeOf((*MockClient)(nil).UpdateWithContext), varargs...)
}
