@startuml clinic-notification-1

skinparam roundcorner 20
skinparam defaultFontName Arial

box Hospital #e8d0a9
    actor Practitioner1 as Practitioner1
    participant "Care Plan Contributor" as CPC1 #LightGray
    participant "<font color=white>Care Plan Service" as CPS #Gray
end box

box ORCA #acd1e9
    participant "Care Plan Contributor" as CPC2 #LightGray
    participant "Task manager" as manager
end box

box Clinic #f0a1a1
    participant "Care Profs" as careprofs
end box

group Prelude Simplified
activate Practitioner1
Practitioner1 -> CPC1 : Start Request\n referral
CPC1 -> CPS: create Task[main]
CPS -> CPC2: notify Task[main]
activate manager
CPC2 -> manager: notify
manager -> CPC2: fetch Task[main]
CPC2 -> CPS: fetch Task[main]
CPS --> CPC2: Task[main]
CPC2 --> manager: Task[main]
manager -> manager: evaluate Task[main]
loop until satisfied
    CPC2 -> CPS: create subtask / questionnaire
    CPS -> CPC1: notify subtask
    CPC1 -> CPS: fetch subtask
    CPS --> CPC1: Task[subtask]
    CPC1 <-> Practitioner1: Fill Task[subtask]
    deactivate Practitioner1
    CPC1 -> CPS: update Task[subtask]
    CPS -> CPC2: notify
    CPC2 -> manager: notify
    manager ->  CPC2: fetch Task[subtask]
    CPC2 -> CPS: fetch Task[subtask]
    CPS -> CPC2: Task[subtask]
    CPC2 -> manager: Task[subtask]
    manager -> manager: evaluate
end loop
end group
group Clinic notification
manager -> CPC2: update Task[main]
activate careprofs
manager -> careprofs: notify Task[main]
careprofs -> CPC2: fetch Task[main]
CPC2 -> CPS: fetch Task[main]
CPS --> CPC2: Task[main]
CPC2 --> careprofs: Task[main]
careprofs -> careprofs: unpack Task[main]
careprofs -> CPC2: fetch ServiceRequest from Task.focus
CPC2 --> CPS: fetch ServiceRequest
CPS --> CPC2: ServiceRequest Bundle
CPC2 --> careprofs: ServiceRequest Bundle
careprofs -> CPC2: fetch Condition from Task.reasonReference
CPC2 --> CPS: fetch Condition
CPS --> CPC2: Condition Bundle
CPC2 --> careprofs: Condition Bundle
careprofs -> careprofs: Create ticket
end group
@enduml
