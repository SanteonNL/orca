services:
  proxy:
    image: nginx:latest
    depends_on:
      - nutsnode
      - orchestrator
    ports:
      - "7080:8080"
    volumes:
      - "./config/nginx-proxy.conf:/etc/nginx/conf.d/nginx-proxy.conf:ro"
  nutsnode:
    image: nutsfoundation/nuts-node:master
    ports:
      - "8081:8081" # port exposed for loading test data (create DIDs and VCs, requesting access token)
    volumes:
      - "../shared_config/policy/:/nuts/config/policy:ro"
      - "../shared_config/discovery/homemonitoring.json:/nuts/discovery/homemonitoring.json:ro"
    environment:
      - NUTS_VERBOSITY=debug
      - NUTS_STRICTMODE=false
      - NUTS_HTTP_INTERNAL_ADDRESS=:8081
      - NUTS_AUTH_CONTRACTVALIDATORS=dummy
      - NUTS_URL=${NUTS_URL}
      - NUTS_DISCOVERY_DEFINITIONS_DIRECTORY=/nuts/discovery/
      - NUTS_VDR_DIDMETHODS=web
  nutsadmin:
    image: "nutsfoundation/nuts-admin:main"
    environment:
      - NUTS_NODE_ADDRESS=http://nutsnode:8081
    ports:
      - "1305:1305"
  orchestrator:
    image: ghcr.io/santeonnl/orca_orchestrator:main
#    build:
#      context: ../../../orchestrator
#      dockerfile: Dockerfile
    ports:
      - "3030:8080"
    environment:
      - ORCA_NUTS_API_URL=http://nutsnode:8081
      - ORCA_NUTS_PUBLIC_URL=${NUTS_URL}
      - ORCA_NUTS_SUBJECT=clinic
      - ORCA_NUTS_DISCOVERYSERVICE=dev:HomeMonitoring2024
      - ORCA_PUBLIC_URL=${NUTS_URL}/orca
      - ORCA_STRICTMODE=false
      - ORCA_CAREPLANCONTRIBUTOR_CAREPLANSERVICE_URL=${CAREPLANCONTRIBUTOR_CAREPLANSERVICE_URL}
      - ORCA_CAREPLANCONTRIBUTOR_STATICBEARERTOKEN=valid
      - ORCA_CAREPLANCONTRIBUTOR_HEALTHDATAVIEWENDPOINTENABLED=true
      # Note: clinic re-uses the FHIR store of the Hospital, so we don't need to start a second one making things even slower
      - ORCA_CAREPLANCONTRIBUTOR_TASKFILLER_QUESTIONNAIREFHIR_URL=${HOSPITAL_URL}/fhir
      - ORCA_CAREPLANCONTRIBUTOR_KAFKA_ENABLED=true
      # Note: To disable demo mode, comment the next two lines and uncomment the other endpoint variable
      - ORCA_CAREPLANCONTRIBUTOR_KAFKA_DEMO=true
      - ORCA_CAREPLANCONTRIBUTOR_KAFKA_ENDPOINT=${NUTS_URL}/viewer/api/delivery
#      - ORCA_CAREPLANCONTRIBUTOR_KAFKA_ENDPOINT=eventhubs-emulator:9092
      - ORCA_CAREPLANCONTRIBUTOR_KAFKA_TOPIC=orca-patient-enrollment-events
      - ORCA_CAREPLANCONTRIBUTOR_KAFKA_SASL_MECHANISM=PLAIN
      - ORCA_CAREPLANCONTRIBUTOR_KAFKA_SASL_USERNAME=$$ConnectionString
      - ORCA_CAREPLANCONTRIBUTOR_KAFKA_SASL_PASSWORD=Endpoint=sb://eventhubs-emulator;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=SAS_KEY_VALUE;UseDevelopmentEmulator=true;
      - ORCA_CAREPLANCONTRIBUTOR_KAFKA_SECURITY_PROTOCOL=SASL_PLAINTEXT
      - ORCA_CAREPLANCONTRIBUTOR_KAFKA_PING=true
      - ORCA_CAREPLANCONTRIBUTOR_TASKFILLER_QUESTIONNAIRESYNCURLS=file:///config/fhir/healthcareservices.json,file:///config/fhir/questionnaires.json
    volumes:
      # FHIR HealthcareService and Questionnaire resources that are loaded into the FHIR store on startup,
      # used by the Task Filler Engine
      - "../../../orchestrator/careplancontributor/taskengine/testdata/healthcareservice-bundle.json:/config/fhir/healthcareservices.json:ro"
      - "../../../orchestrator/careplancontributor/taskengine/testdata/questionnaire-bundle.json:/config/fhir/questionnaires.json:ro"
  viewer:
    image: ghcr.io/santeonnl/orca_viewersimulator:main
#    build:
#      context: ../../../viewer_simulator
#      dockerfile: Dockerfile
    environment:
      ORCA_CAREPLANCONTRIBUTOR_CAREPLANSERVICE_URL: ${CAREPLANCONTRIBUTOR_CAREPLANSERVICE_URL}
      FHIR_BASE_URL: http://orchestrator:8080/cpc/cps/fhir
      FHIR_AGGREGATE_URL: http://orchestrator:8080/cpc/aggregate/fhir
      FHIR_AUTHORIZATION_TOKEN: valid
      NEXT_ALLOWED_ORIGINS: localhost:7080
  eventhubs-emulator:
    container_name: "eventhubs-emulator"
    image: "mcr.microsoft.com/azure-messaging/eventhubs-emulator:latest"
    volumes:
      - "./config/eventhubs-emulator.json:/Eventhubs_Emulator/ConfigFiles/Config.json"
    ports:
      - "5672:5672"
      - "9092:9092"
    environment:
      BLOB_SERVER: azurite
      METADATA_SERVER: azurite
      ACCEPT_EULA: "Y"
    depends_on:
      - azurite
  azurite:
    container_name: "azurite"
    image: "mcr.microsoft.com/azure-storage/azurite:latest"
    volumes:
      - azurite:/data
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
  init-azurite:
    container_name: "init-azurite"
    image: mcr.microsoft.com/azure-cli:latest
    command: >
      bash -c "az storage container create --name leases --connection-string \"DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;\" && sleep 999999999"
    depends_on:
      azurite:
        condition: service_started
volumes:
  azurite:
