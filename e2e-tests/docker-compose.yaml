services:
  proxy:
    image: apache/apisix
    ports:
      - "9080:80"
      - "9443:443"
    expose:
      - "80"
      - "443"
    # Although APISIX runs in standalone mode, if we set it, it will try to alter config.yaml, requiring a writeable filesystem.
    # This is not possible in GH Actions, so then the e2e test would fail. So, we don't set the standalone variable, which doesn't seem to impact
    # the functionality of APISIX.
    #environment:
    #  APISIX_STAND_ALONE: true
    volumes:
      - './config/proxy/apisix_route_config.yaml:/usr/local/apisix/conf/apisix.yaml:ro'
      - './config/proxy/apisix_config.yaml:/usr/local/apisix/conf/config.yaml:ro'
  hospital_orchestrator:
    image: "${ORCHESTRATOR_IMAGE:-ghcr.io/santeonnl/orca_orchestrator:main}"
    # build:
    #  context: ../orchestrator
    #  dockerfile: Dockerfile
    environment:
      # TODO: Fix in INT-218: Simply point to the health endpoint so we don't have to integrate enrollment yet, as it will change quite a bit in the future
      - ORCA_CAREPLANCONTRIBUTOR_FRONTEND_URL=http://localhost:8080/frontend/api/health
      - ORCA_NUTS_API_URL=http://nutsnode:8081
      - ORCA_NUTS_PUBLIC_URL=https://proxy/nuts
      - ORCA_NUTS_DID=${HOSPITAL_DID:-}
      - ORCA_PUBLIC_URL=/hospital/orca
      - ORCA_CAREPLANCONTRIBUTOR_ENABLED=true
      - ORCA_CAREPLANCONTRIBUTOR_CAREPLANSERVICE_URL=https://proxy/clinic/orca/cps
      - ORCA_APPLAUNCH_DEMO_ENABLED=true
    volumes:
      # Proxy uses a self-signed certificate, so load it the CA cert into the OS truststore.
      - "./config/proxy/truststore.pem:/etc/ssl/certs/SelfSigned_RootCA.pem:ro"
  clinic_orchestrator:
    image: "${ORCHESTRATOR_IMAGE:-ghcr.io/santeonnl/orca_orchestrator:main}"
    # build:
    #  context: ../orchestrator
    #  dockerfile: Dockerfile
    environment:
      - ORCA_NUTS_API_URL=http://nutsnode:8081
      - ORCA_NUTS_PUBLIC_URL=https://proxy/nuts
      - ORCA_NUTS_DID=${CLINIC_DID:-}
      - ORCA_CAREPLANSERVICE_ENABLED=true
      - ORCA_CAREPLANSERVICE_FHIR_URL=http://fhirstore:8080/fhir/clinic
    depends_on:
      - fhirstore
    volumes:
      # Proxy uses a self-signed certificate, so load it the CA cert into the OS truststore.
      - "./config/proxy/truststore.pem:/etc/ssl/certs/SelfSigned_RootCA.pem:ro"
  nutsnode:
    image: nutsfoundation/nuts-node:6.0.0-beta.9
    ports:
      - "8081:8081" # port exposed for loading test data (create DIDs and VCs, requesting access token)
    volumes:
      - "./config/nuts/discovery/homemonitoring.json:/nuts/discovery/homemonitoring.json:ro"
      - "./config/nuts/policy/:/nuts/policy/:ro"
      # Proxy uses a self-signed certificate, so load it the CA cert into the OS truststore.
      - "./config/proxy/truststore.pem:/etc/ssl/certs/SelfSigned_RootCA.pem:ro"
    environment:
      - NUTS_VERBOSITY=debug
      - NUTS_STRICTMODE=false
      - NUTS_HTTP_INTERNAL_ADDRESS=:8081
      - NUTS_AUTH_CONTRACTVALIDATORS=dummy
      - NUTS_URL=https://proxy/nuts
      - NUTS_POLICY_DIRECTORY=/nuts/policy/
      - NUTS_DISCOVERY_DEFINITIONS_DIRECTORY=/nuts/discovery/
      - NUTS_DISCOVERY_SERVER_IDS=dev:HomeMonitoring2024
    healthcheck:
      interval: 3s
      timeout: 3s
      retries: 30
      # HAPI FHIR runs on distroless Java, so we can't use curl/wget on that container to check the health.
      # So instead, we change the health check of this container to check the health of the FHIR store.
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://fhirstore:8080/fhir/DEFAULT/Account" ]
  fhirstore:
    image: hapiproject/hapi:v7.2.0
    ports:
      - "9090:8080"
    environment:
      - hapi.fhir.fhir_version=R4
      - hapi.fhir.partitioning.allow_references_across_partitions=false
  frontend:
    # building the image now as enrollment is not yet merged, as well, it needs to test the latest changes
    # image: ${FRONTEND_IMAGE:-ghcr.io/santeonnl/frontend:main}
    build:
     context: ../frontend
     dockerfile: Dockerfile
    ports:
      - "3000"
